[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny.express import input, ui\nfrom shiny import render, reactive\nfrom shinywidgets import render_widget, render_plotly\nimport palmerpenguins  # This package provides the Palmer Penguins dataset\nfrom shinyswatch import theme\nimport seaborn as sns\n\n# Use the built-in function to load the Palmer Penguins dataset\nfrom palmerpenguins import load_penguins \npenguins = load_penguins()\n\n# CSS for scrollable content\nstyle = \"\"\"\n<style>\n    body {\n        overflow-y: auto;\n        padding: 20px;\n    }\n    .shiny-main-content {\n        max-height: 80vh; /* Limit the height of the main content */\n        overflow-y: auto; /* Add vertical scrollbar if needed */\n    }\n</style>\n\"\"\"\n\nui.page_opts(title=\"Melissa's Palmer's Penguin Data Review\", fillable=True, theme=theme.spacelab) + ui.HTML(style)\n\n# Add a Shiny UI sidebar for user interaction\n# Use a with block to add content to the sidebar\nwith ui.sidebar(bg=\"#F6FFF8\"):  \n    ui.h2(\"Sidebar\") # Use the ui.h2() function to add a 2nd level header to the sidebar    \n    ui.div(\n        ui.hr(),  # Use ui.hr() to add a horizontal rule to the sidebar \n        style=\"border-top: 2px solid #495569; margin: 10px 0;\"  # Custom style for the horizontal rule\n    ) \n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the species\n    ui.input_checkbox_group(  \n        \"selected_species_list\",  \n        \"Select One or More Species:\",\n        choices=[\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n        selected=[\"Adelie\", \"Chinstrap\", \"Gentoo\"],\n        inline=False \n    )\n\n    # Use ui.input_checkbox_group() to create a checkbox group input to filter the island\n    ui.input_checkbox_group(  \n        \"selected_island_list\",  \n        \"Select One or More Islands:\",\n        choices=[\"Biscoe\", \"Dream\", \"Torgersen\"],\n        selected=[\"Biscoe\", \"Dream\", \"Torgersen\"],\n        inline=False \n    )\n\n    ui.div(\n        ui.hr(),  # Use ui.hr() to add a horizontal rule to the sidebar \n        style=\"border-top: 2px solid #495569; margin: 10px 0;\"  # Custom style for the horizontal rule\n    )  \n    \n    # Use ui.input_numeric() to create a numeric input for the number of Plotly histogram bins\n    ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 20, min=1, max=100)  \n\n    @render.text\n    def numeric():\n        return input.numeric()\n\n    ui.div(\n        ui.hr(),  # Use ui.hr() to add a horizontal rule to the sidebar \n        style=\"border-top: 2px solid #495569; margin: 10px 0;\"  # Custom style for the horizontal rule\n    ) \n    \n    # Use ui.input_slider() to create a slider input for the number of Seaborn bin\n    (ui.input_slider(\"seaborn_bin_count\", \"Seaborn Bin Count\", 1, 50, 25),)  \n\n    @render.text\n    def slider():\n        return f\"{input.slider()}\"\n  \n    @render.text\n    def value():\n        return \", \".join(input.checkbox_group())\n\n    ui.div(\n        ui.hr(),  # Use ui.hr() to add a horizontal rule to the sidebar \n        style=\"border-top: 2px solid #495569; margin: 10px 0;\"  # Custom style for the horizontal rule\n    )\n    ui.h4(\"Interactive Scatterplot\")\n    \n    # Dropdown for selecting x and y axes for the scatter plot\n    ui.input_selectize(\"x_column_scatter\", \"Select X Variable:\", [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"])\n    ui.input_selectize(\"y_column_scatter\", \"Select Y Variable:\", [\"bill_length_mm\", \"bill_depth_mm\", \"flipper_length_mm\", \"body_mass_g\"], selected=\"flipper_length_mm\")\n    \n    @render.text\n    def select():\n        return f\"{input.selectize()}\"   \n        \n    # Use ui.a() to add a hyperlink to the sidebar\n    ui.a(\"Melissa's GitHub\", href=\"https://github.com/meldstonerogers\", target=\"_blank\") \n\n#####Main Content##### \n#Data Table, showing all data\n#Data Grid, showing all data\n\nwith ui.div(class_=\"shiny-main-content\"):\n    with ui.layout_columns():\n        #Plotly Histogram, showing all species \n        with ui.card(full_screen=True):\n                ui.card_header(\"Plotly Histogram\", \n                              style=\"background-color: #F6FFF8; color: #909090;\"\n                              )\n                @render_widget  \n                def plot3():  \n                    penguins = filtered_data()\n                    histogram = px.histogram(\n                        penguins,\n                        x=\"body_mass_g\",\n                        nbins=input.plotly_bin_count(),\n                        color=\"species\",\n                        color_discrete_sequence=[\"#B9EEC3\", \"#66DBE6\", \"#ECAFD0\"],  # Custom colors\n                    ).update_layout(\n                        title={\"text\": \"Penguin Mass\", \"x\": 0.5},\n                        yaxis_title=\"Count\",\n                        xaxis_title=\"Body Mass (g)\",\n                    )  \n                    return histogram\n\n        #Seaborn Histogram, showing all species \n        with ui.card(full_screen=True):\n                ui.card_header(\"Seaborn Histogram\",\n                              style=\"background-color: #F6FFF8; color: #909090;\"\n                              )\n                @render.plot(alt=\"A Seaborn histogram on penguin body mass in grams.\")  \n                def plot4():\n                    penguins = filtered_data()\n                    custom_pallette = [\"#B9EEC3\", \"#66DBE6\", \"#ECAFD0\"]\n                    ax = sns.histplot(\n                        data = filtered_data(), \n                        x=\"body_mass_g\", \n                        bins=input.seaborn_bin_count(), \n                        hue=\"species\",\n                        palette=custom_pallette,\n                        kde=False,)  \n                    ax.set_title(\"Penguins Mass\")\n                    ax.set_xlabel(\"Mass (g)\")\n                    ax.set_ylabel(\"Count\")\n                    return ax \n    \n    \n\n    #Plotly Scatterplot, showing all species \n    with ui.card(full_screen=True):\n        ui.card_header(\"Plotly Scatterplot\",\n                      style=\"background-color: #F6FFF8; color: #909090;\"\n                      )\n        @render_widget \n        def penguins_scatter_plot():  \n            x_column_name = input.x_column_scatter()\n            y_column_name = input.y_column_scatter()\n    \n            # Filter the penguins dataset based on selected species\n            penguins = filtered_data()\n    \n            # Create scatter plot\n            scatterplot = px.scatter(\n                data_frame = filtered_data(),\n                x=x_column_name,  # X-axis based on user selection\n                y=y_column_name,  # Y-axis based on user selection\n                color=\"species\",  # Color points by species\n                title=f\"{x_column_name} vs {y_column_name}\",\n                labels={x_column_name: x_column_name, y_column_name: y_column_name},  # Custom labels for axes\n                color_discrete_sequence=[\"#B9EEC3\", \"#66DBE6\", \"#ECAFD0\"],  # Custom colors\n                \n            ).update_layout(\n                title={\"text\": f\"{x_column_name} vs {y_column_name}\", \"x\": 0.5},\n                yaxis_title=y_column_name,\n                xaxis_title=x_column_name,\n            )\n    \n            return scatterplot\n\n    with ui.layout_columns():\n                with ui.card(full_screen=True):\n                    ui.card_header(\"Data Table\",\n                                  style=\"background-color: #F6FFF8; color: #909090;\"\n                                  )\n                    @render.data_frame  \n                    def plot1():\n                        return (filtered_data())\n        \n                with ui.card(full_screen=True):\n                        ui.card_header(\"Data Grid\", \n                                       style=\"background-color: #F6FFF8; color: #909090;\"\n                                      )\n                        @render.data_frame  \n                        def plot2():\n                            return (filtered_data())    \n\n# --------------------------------------------------------\n# Reactive calculations and effects\n# --------------------------------------------------------\n\n# Add a reactive calculation to filter the data\n# By decorating the function with @reactive, we can use the function to filter the data\n# The function will be called whenever an input functions used to generate that output changes.\n# Any output that depends on the reactive function (e.g., filtered_data()) will be updated when the data changes.\n\n# Define server logic\n@reactive.calc\ndef filtered_data():\n    isFilterMatch = (\n        penguins[\"species\"].isin(input.selected_species_list()) & \n        penguins[\"island\"].isin(input.selected_island_list())\n        )    \n    return penguins[isFilterMatch]\n", "type": "text"}]